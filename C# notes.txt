C#

Reference Type vs Value Type
	-Value type actually holds its own data
		Example: string mystring = 'Hello World!'
	-mystring is created and holds the data

	-Reference Type- holds a pointer(Reference) to the actual data
		Example: Rigidbody myrigidbody = Getcompononent<Rigidbody>();
	-This creates a space in memory(variable basically) that holds the location(reference) to the actualy Rigidbody
	-Another example
		Example: Myclass myclass = new Myclass();
	-Creates a new object using the class defintion of Myclass and also creates a reference to that new object in myclass
	-Classes are just simply a reference type
	-Types, it seems, are basically just like blueprints.
	-You can assign things to use a blueprint and the value
		Example: int32 myint = 20;
	-This basically creates an object called myint that uses the int32 bleuprint and has a value of 20
	-The blueprint can contain many things. see, https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/types/ for more info on that

	-Objects are just instances of classes aka types....because classes are types. a specific type of type. It is a reference type.
	

Static Methods/properties/etc
	-A static method, etc means you have to call the method/property/etc from the object itself instead of a reference of it
		-Example: see this instead: https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/static
		-Basically just know that if it is a static method you would call it like this: ClassName.MethodName
		Instead of: ClassName mynewclass = new ClassName()
			    mynewclass.MethodName;
		-Again, the above does not work! The correct way would be 
			ClassName.MethodName;
